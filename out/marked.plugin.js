// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = function(BasePlugin) {
    var MarkedPlugin;
    return MarkedPlugin = (function(superClass) {
      extend(MarkedPlugin, superClass);

      function MarkedPlugin() {
        return MarkedPlugin.__super__.constructor.apply(this, arguments);
      }

      MarkedPlugin.prototype.name = 'marked';

      MarkedPlugin.prototype.config = {
        markedOptions: {
          pedantic: false,
          gfm: true,
          sanitize: false,
          highlight: null
        },
        markedRenderer: {
          paragraph: function(text) {
            var cName;
            cName = text.split(' ')[0];
            if (cName.charAt(0) === ".") {
              text = text.replace(cName, "");
              cName = cName.replace(".", "");
              return "<div class='post-paragraph " + cName + "'>" + text + "</div>\n";
            }
            return "<p>" + text + "</p>\n";
          }
        }
      };

      MarkedPlugin.prototype.extendTemplateData = function(opts) {
        var config, marked, templateData;
        templateData = opts.templateData;
        config = this.config;
        marked = require('marked');
        marked.setOptions(config.markedOptions);
        return templateData.renderMarkdown = function(mdString) {
          return marked(mdString);
        };
      };

      MarkedPlugin.prototype.render = function(opts, next) {
        var config, inExtension, marked, outExtension, renderer;
        config = this.config;
        inExtension = opts.inExtension, outExtension = opts.outExtension;
        if ((inExtension === 'md' || inExtension === 'markdown') && (outExtension === null || outExtension === 'html')) {
          marked = require('marked');
          marked.setOptions(config.markedOptions);
          if (config.markedRenderer) {
            renderer = new marked.Renderer();
            Object.keys(config.markedRenderer).forEach(function(key) {
              return renderer[key] = config.markedRenderer[key];
            });
            return marked(opts.content, {
              renderer: renderer
            }, function(err, result) {
              opts.content = result;
              return next(err);
            });
          }
          return marked(opts.content, function(err, result) {
            opts.content = result;
            return next(err);
          });
        } else {
          return next();
        }
      };

      return MarkedPlugin;

    })(BasePlugin);
  };

}).call(this);
